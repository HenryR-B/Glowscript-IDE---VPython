GlowScript 2.7 VPython
from __future__ import division

# setting up the 3D environment (The size and position of the Walls and the Ball) #
ball = sphere(pos=vec(-5,-8.945,0), radius=(1), color= vec(10,1,0.5), opacity=0.9)
wallR = box(pos=vec(10,0,0), size=vec((1/10),20,40), color=color.green)
wallL = box(pos=vec(-10,0,0), size=vec((1/10),20,40), color=color.green)
wallT = box(pos=vec(0,10,0), size=vec(20,(1/10),40), color=color.green)
wallBo = box(pos=vec(0,-10,0), size=vec(20,(1/10),40), color=color.green)
wallBa = box(pos=vec(0,0,-20), size=vec(20,20,1/10), color= color.green)
wallF = box(pos=vec(0,0,20), size=vec(20,20,1/10), color= color.green, opacity = 0)

# variables to be used in the future #
friction = 0.93 # dampening constant from friction
time = 0  # setting the initial time to zero
dt = 0.001 # the time step is 1/1000 of a second

ball.velocity = vec(10,15,-5)  # setting the velocity of the ball to be a vector (can be changed) #


# loop until a specified time
while time < 1000:
        rate(1/dt*2)
        ball.velocity.y = ball.velocity.y - 9.81*dt
        if ball.pos.x > wallR.pos.x - 1.05 :
            ball.pos.x = ball.pos.x -0.005
            ball.velocity.x = -ball.velocity.x *friction
            print(ball.velocity)
        if ball.pos.x < wallL.pos.x +1.05 :
            ball.pos.x = ball.pos.x +0.005
            ball.velocity.x = -ball.velocity.x *friction
            print(ball.velocity)
        if ball.pos.y > wallT.pos.y - 1.05 :
            ball.pos.y = ball.pos.y -0.005
            ball.velocity.y = -ball.velocity.y *friction
            print(ball.velocity)
        if ball.pos.y < wallBo.pos.y +1.05 :
            ball.pos.y = ball.pos.y +0.005
            ball.velocity.y = -ball.velocity.y *friction
            ball.velocity.x = ball.velocity.x *friction
            ball.velocity.z = ball.velocity.z *friction
            print(ball.velocity)    
        if ball.pos.z < wallBa.pos.z +1.05 :
            ball.pos.z = ball.pos.z +0.005
            ball.velocity.z = -ball.velocity.z *friction
            print(ball.velocity)
        if ball.pos.z > wallF.pos.z -1.05 :
            ball.pos.z = ball.pos.z -0.005
            ball.velocity.z = -ball.velocity.z *friction
            print(ball.velocity)
        ball.pos = ball.pos + ball.velocity*dt
        time += dt